{"version":3,"sources":["factories/gamecontroller.js","factories/player.js","factories/gameboard.js","factories/ship.js","components/commonStyling.js","components/Cell.jsx","components/GridContainer.jsx","components/Header.jsx","components/PlacementGrid.jsx","components/ShipPanel.jsx","App.js","index.js","factories/randomCoordinates.js"],"names":["Player","require","GameController","playerOne","playerTwo","gameOver","winner","playerOneTurn","restartGame","board","clearShipsFromBoard","resetShips","randomShipPlacement","winCondition","checkAllShipsSunk","changeTurn","hit","attack","checkHit","resetWinner","module","exports","Gameboard","randomCoordinates","boolean","isAI","placeHit","x","y","receiveAttack","aiAttack","grid","Ship","shipsToPlace","shipNamesAndLengths","name","length","ships","buildGrid","gridObj","ship","Array","fill","i","buildShips","map","obj","validateShipPlacement","random","row","column","illegalPlacement","coordinates","horizontal","fitShipToGrid","checkForShipClash","shipLength","startX","startY","startPosition","placeHorizontal","r","rIndex","c","cIndex","index","placeVertical","placeShip","newGrid","forEach","randomOrientation","placeUserShip","j","shipObj","find","indexX","element","indexY","checkShipHit","every","sunk","hits","sinkShip","rotate","position","Button","styled","button","Cell","handleHover","handleClick","handleRightClick","isHovering","ai","BattleCell","id","onMouseEnter","onClick","onContextMenu","div","props","includes","handleCellColour","GridContainer","playerGrid","cell","clickFunction","playerTitle","GridBox","Header","useState","viewInstruction","setViewInstructions","HeaderWrapper","PlacementGrid","placingShip","placementGrid","cellID","ShipPanel","playerOneRandomPlacement","startGame","allShipsPlaced","ShipPanelContainer","shipPanel","ShipContainer","ShipBox","item","ShipCell","displayShips","gameController","reducer","action","type","filter","Error","App","playerOneGridState","setPlayerOneGridState","playerTwoGridState","setPlayerTwoGridState","showShipPanel","setShowShipPanel","useReducer","dispatch","setPlacingShip","setIsHovering","setAllShipsPlaced","gameStarted","setGameStarted","setGameOver","gameWinner","setGameWinner","useEffect","checkforWinner","PageWrapper","AppContainer","PlayerOnePlacementContainer","e","parseInt","target","rowLimit","push","toString","columnLimit","Number","preventDefault","selectedShip","parentNode","TwoPlayerPlacementContainer","ReactDOM","render","StrictMode","document","getElementById","Math","floor"],"mappings":"iHAAA,IAAMA,EAASC,EAAQ,IAEjBC,EAAkB,WACtB,IAAMC,EAAYH,IACZI,EAAYJ,GAAO,GACrBK,GAAW,EACXC,EAAS,KAETC,GAAgB,EAedC,EAAc,WAClBL,EAAUM,MAAMC,sBAChBN,EAAUK,MAAMC,sBAChBP,EAAUM,MAAME,aAChBP,EAAUK,MAAME,aAChBP,EAAUK,MAAMG,uBAGZC,EAAe,WACnB,GAAIN,GACF,GAAIH,EAAUK,MAAMK,oBAIlB,OAHAT,GAAW,EACXC,EAAS,aACTE,IACOF,OAGT,GAAIH,EAAUM,MAAMK,oBAIlB,OAHAT,GAAW,EACXC,EAAS,aACTE,IACOF,EAGX,OAAO,GAOT,MAAO,CACL,gBACE,OAAOH,GAET,gBACE,OAAOC,GAET,eACE,OAAOC,GAETU,WAtDiB,SAAbA,IAEJ,IAAIC,GAAM,EACV,KAFAT,GAAiBA,GAEG,CAClB,KAAOS,GAAK,CACGZ,EAAUa,OAAOd,EAAUM,OAC5BS,WAAUF,GAAM,GACxBH,MAAgBG,GAAM,GAE5BD,MA8CFF,eACAM,YAhBkB,WAClBb,EAAS,OAjDW,GAoExBc,EAAOC,QAAUnB,G,mBCtEjB,IAAMoB,EAAYrB,EAAQ,IACpBsB,EAAoBtB,EAAQ,GAuClCmB,EAAOC,QArCQ,SAACG,GACd,IAAMC,EAAOD,EACPf,EAAQa,IACVG,GAAMhB,EAAMG,sBAEhB,IAAMc,EAAW,SAACjB,EAAOkB,EAAGC,GAE1B,MAAO,CAAED,IAAGC,IAAGV,SADET,EAAMoB,cAAcF,EAAGC,KAIpCE,EAAW,SAAXA,EAAYrB,GAChB,MAAiBc,IAATI,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAKX,OAJ6B,IAAzBnB,EAAMsB,KAAKJ,GAAGC,GAAGZ,KACnBc,EAASrB,GAECiB,EAASjB,EAAOkB,EAAGC,IAcjC,MAAO,CACL,YACE,OAAOnB,GAETQ,OAda,SAACR,EAAOkB,EAAGC,GAExB,OAAa,IAATH,EACeK,EAASrB,GAGXiB,EAASjB,EAAOkB,EAAGC,O,8DC5BlCI,EAAO/B,EAAQ,IACfsB,EAAoBtB,EAAQ,GAsLlCmB,EAAOC,QApLW,WAChB,IASIY,EATAF,EAAO,GACLG,EAAsB,CAC1B,CAAEC,KAAM,YAAaC,OAAQ,GAC7B,CAAED,KAAM,YAAaC,OAAQ,GAC7B,CAAED,KAAM,UAAWC,OAAQ,GAC3B,CAAED,KAAM,aAAcC,OAAQ,GAC9B,CAAED,KAAM,UAAWC,OAAQ,IAEzBC,EAAQ,GAGNC,EAAY,WAChB,IAAMC,EAAU,CAAEC,MAAM,EAAOxB,KAAK,IACpCe,EAAO,IAAIU,MAAM,KACZC,KAAKH,EAAS,GACnB,IAAK,IAAII,EAAI,EAAGA,EAAIZ,EAAKK,OAAQO,GAAK,EACpCZ,EAAKY,GAAK,IAAIF,MAAM,IACpBV,EAAKY,GAAGD,KAAKH,EAAS,IAIpBK,EAAa,kBAAMV,EAAoBW,KAAI,SAACC,GAAD,OAASd,EAAKc,EAAIX,KAAMW,EAAIV,YAMvEW,EAAwB,SAACP,GAAuC,IAAjCQ,EAAgC,wDAAhBC,EAAgB,uCAAXC,EAAW,uCACnE,GAAIF,EAAQ,CAGV,IAFA,IAAIG,GAAmB,EACnBC,EAAc,CAAEzB,EAAG,EAAGC,EAAG,GACtBuB,GACLC,EAAc7B,KACU,IAApBiB,EAAKa,WACPD,EAAYxB,EAAI0B,EAAcd,EAAKJ,OAAQgB,EAAYxB,GAEvDwB,EAAYzB,EAAI2B,EAAcd,EAAKJ,OAAQgB,EAAYzB,GAEzDwB,EAAmBI,EAAkBf,EAAKJ,OAAQI,EAAKa,WAAYD,EAAYzB,EAAGyB,EAAYxB,GAEhG,OAAOwB,EAGT,IACIA,EAAc,CAAEH,MAAKC,UAKzB,IAJwB,IAApBV,EAAKa,WACPD,EAAYF,OAASI,EAAcd,EAAKJ,OAAQgB,EAAYF,QACvDE,EAAYH,IAAMK,EAAcd,EAAKJ,OAAQgB,EAAYH,MAC7CM,EAAkBf,EAAKJ,OAAQI,EAAKa,WAAYD,EAAYH,IAAKG,EAAYF,QAEhG,OAAOE,GAGHG,EAAoB,SAACC,EAAYH,EAAYI,EAAQC,GACzD,GAAIL,EAAY,CACd,IAAK,IAAIV,EAAI,EAAGA,EAAIa,EAAYb,GAAK,EACnC,GAAIZ,EAAK0B,GAAQC,EAASf,GAAGH,KAC3B,OAAO,EAGX,OAAO,EAET,IAAK,IAAIG,EAAI,EAAGA,EAAIa,EAAYb,GAAK,EACnC,GAAIZ,EAAK0B,EAASd,GAAGe,GAAQlB,KAC3B,OAAO,EAGX,OAAO,GAGHc,EAAgB,SAACE,EAAYG,GACjC,OAAIA,EAAgBH,EAAa,EAC/BG,EAAgB,EAAIH,EAAa,EAG5BG,GAYHC,EAAkB,SAACX,EAAKC,EAAQV,GAAd,OACtBT,EAAKc,KAAI,SAACgB,EAAGC,GAAJ,OACPD,EAAEhB,KAAI,SAACkB,EAAGC,GAAJ,OACJF,IAAWb,GAAOe,GAAUd,GAAUc,EAASd,EAASV,EAAKJ,OAA7D,2BAA2E2B,GAA3E,IAA8EvB,KAAM,CAAEL,KAAMK,EAAKL,KAAM8B,MAAOD,EAASd,KAAaa,SAIpIG,EAAgB,SAACjB,EAAKC,EAAQV,GAAd,OACpBT,EAAKc,KAAI,SAACgB,EAAGC,GAAJ,OACPD,EAAEhB,KAAI,SAACkB,EAAGC,GAAJ,OACJA,IAAWd,GAAUY,GAAUb,GAAOa,EAASb,EAAMT,EAAKJ,OAA1D,2BAAwE2B,GAAxE,IAA2EvB,KAAM,CAAEL,KAAMK,EAAKL,KAAM8B,MAAOH,EAASb,KAAUc,SAI9HI,EAAY,SAAC3B,EAAMS,EAAKC,GAC5B,IAAIkB,EAAU,GACOA,EAAjB5B,EAAKa,WAAsBO,EAAgBX,EAAKC,EAAQV,GAC7C0B,EAAcjB,EAAKC,EAAQV,GAC1CT,EAAOqC,GAoDT,OAJA9B,IACAD,EAAQO,IACRX,EAAeW,IAER,CACL,WACE,OAAOb,GAET,YACE,OAAOM,GAET,mBACE,OAAOJ,GAETK,YACAM,aACAjC,WAlJiB,kBAAO0B,EAAQO,KAmJhClC,oBAjJ0B,kBAAM4B,KAkJhC1B,oBA7F0B,WAE1ByB,EAAMgC,SAAQ,SAAC7B,GACbA,EAAK8B,oBACL,MAAiBvB,EAAsBP,EAH5B,MAGHb,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EACXuC,EAAU3B,EAAMb,EAAGC,OAyFrBuC,YACAI,cAhEoB,SAAC/B,EAAMS,EAAKC,GAChC,IAAIkB,EAAU,GACVhB,EAAcL,EAAsBP,GAAM,EAAOS,EAAKC,GAC1D,QAAKE,IACgBgB,EAAjB5B,EAAKa,WAAsBO,EAAgBR,EAAYH,IAAKG,EAAYF,OAAQV,GACrE0B,EAAcd,EAAYH,IAAKG,EAAYF,OAAQV,GAClET,EAAOqC,GACA,IA0DPvC,cAjDoB,SAACc,EAAG6B,GACxB,IAAIzC,EAAKY,GAAG6B,GAAGxD,IAAf,CACA,IAAwB,IAApBe,EAAKY,GAAG6B,GAAGhC,OAAqC,IAAnBT,EAAKY,GAAG6B,GAAGxD,IAAe,CACzD,IAAMyD,EAAU1C,EAAKY,GAAG6B,GAAGhC,MATPL,EAUWsC,EAAQtC,KAVVE,EAAMqC,MAAK,SAAC5B,GAAD,OAASA,EAAIX,OAASA,MAWtDnB,IAAIyD,EAAQR,OAXD,IAAC9B,EAahBiC,EAAUrC,EAAKc,KAAI,SAACI,EAAK0B,GAAN,OACvB1B,EAAIJ,KAAI,SAAC+B,EAASC,GAChB,OAAIF,IAAWhC,GAAKkC,IAAWL,EACtB,2BACFI,GADL,IAEE5D,KAAK,IAGF4D,QAIX,OADA7C,EAAOqC,IAtBY,SAACzB,EAAG6B,GACvB,IAAwB,IAApBzC,EAAKY,GAAG6B,GAAGhC,OAAqC,IAAnBT,EAAKY,GAAG6B,GAAGxD,IAAc,OAAO,EAsB7D8D,CAAanC,EAAG6B,KA+BpB1D,kBA3BwB,WACxB,QAAIuB,EAAM0C,OAAM,SAACvC,GAAD,OAAwB,IAAdA,EAAKwC,Y,wCCzJnC,IAAMzD,EAAoBtB,EAAQ,GA8ClCmB,EAAOC,QA5CM,SAACc,EAAMC,GAClB,IAAI4C,GAAO,EACP3B,GAAa,EAEX4B,EAAOxC,MAAML,GAAQM,MAAK,GAO1BwC,EAAW,WACXD,EAAKF,OAAM,SAAC/D,GAAD,OAAiB,IAARA,OAAegE,GAAO,IAG1CG,EAAS,WACb9B,GAAcA,GAUhB,MAAO,CACLlB,OACAC,SACApB,IAvBU,SAACoE,GACPA,GAAYH,EAAK7C,SAAQ6C,EAAKG,IAAY,GAC9CF,KAsBAC,SACAb,kBAZwB,WAExB,IADA,IAAQ3C,EAAMJ,IAANI,EACCgB,EAAI,EAAGA,EAAIhB,EAAGgB,GAAK,EAC1BwC,KAUF,WACE,OAAOH,GAET,WACE,OAAOC,GAET,iBACE,OAAO5B,M,iICvCAgC,EAASC,IAAOC,OAAV,wZ,OCgBJC,EAfF,SAAC,GAA4F,IAA1FpC,EAAyF,EAAzFA,YAAaqC,EAA4E,EAA5EA,YAAaC,EAA+D,EAA/DA,YAAaC,EAAkD,EAAlDA,iBAAkBC,EAAgC,EAAhCA,WAAYpD,EAAoB,EAApBA,KAAMxB,EAAc,EAAdA,IAAK6E,EAAS,EAATA,GAC9F,OACE,cAACC,EAAD,CACEC,GAAI3C,EACJ4C,aAAcP,EACdQ,QAASP,EACTE,WAAYA,EACZpD,KAAMA,EACNxB,IAAKA,EACLkF,cAAeP,EACfE,GAAIA,KAkBJC,EAAaR,IAAOa,IAAV,4LAIA,SAACC,GAAD,OAfS,SAACA,GACxB,OAAIA,EAAMR,YAAcQ,EAAMR,WAAWS,SAASD,EAAML,IAAY,OAChEK,EAAM5D,MAAQ4D,EAAMpF,IAAY,OAC/BoF,EAAMP,IACLO,EAAM5D,KAAa,OAErB4D,EAAMpF,IAAY,OAEf,UAOkBsF,CAAiBF,MCP7BG,EAxBO,SAACH,GACrB,IAAMI,EAAaJ,EAAMrE,KAAKc,KAAI,SAACI,EAAK0B,GACtC,OAAO1B,EAAIJ,KAAI,SAAC4D,EAAM5B,GACpB,OACE,cAAC,EAAD,CAEEzB,YAAW,UAAKuB,GAAL,OAAcE,GACzBa,YAAaU,EAAMM,cACnBlE,OAAMiE,EAAKjE,KACXxB,MAAKyF,EAAKzF,IACV6E,GAAIO,EAAMP,IANZ,UACUlB,GADV,OACmBE,UAWzB,OACE,gCACE,6BAAKuB,EAAMO,cACX,cAACC,EAAD,UAAUJ,QAOHI,EAAUtB,IAAOa,IAAV,2JCALU,EA1BA,WACb,MAA+CC,oBAAS,GAAxD,mBAAOC,EAAP,KAAwBC,EAAxB,KAMA,OACE,eAACC,EAAD,WACE,6CACA,qHACA,eAAC5B,EAAD,CAAQY,QARe,WACzBe,GAAoB,SAACD,GAAD,OAAsBA,MAOxC,UAAsCA,EAAkB,OAAS,OAAjE,mBACCA,GACC,eAAC,WAAD,WACE,8BACE,+CADF,+GAGA,8BACE,iDADF,0GAWJE,EAAgB3B,IAAOa,IAAV,yHCHJe,EAzBO,SAAC,GAAmF,IAAjFnF,EAAgF,EAAhFA,KAAmB6D,GAA6D,EAA1EuB,YAA0E,EAA7DvB,YAAYH,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,iBAC1EyB,EAAgBrF,EAAKc,KAAI,SAACI,EAAK0B,GACnC,OAAO1B,EAAIJ,KAAI,SAAC4D,EAAM5B,GACpB,OACE,cAAC,EAAD,CAEEwC,OAAM,UAAK1C,GAAL,OAAcE,GACpBzB,YAAW,UAAKuB,GAAL,OAAcE,GACzBe,WAAYA,EACZH,YAAaA,EACbC,YAAaA,EACbC,iBAAkBA,EAClBnD,OAAMiE,EAAKjE,MARb,UACUmC,GADV,OACmBE,UAazB,OACE,8BACE,cAAC+B,EAAD,UAAUQ,O,QCaDE,EAjCG,SAAC,GAAiF,IAA/EjF,EAA8E,EAA9EA,MAAOqD,EAAuE,EAAvEA,YAAa6B,EAA0D,EAA1DA,yBAA0BC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAwB5E,OACE,eAACC,EAAD,WACE,cAACrC,EAAD,CAAQY,QAASsB,EAAjB,8BACCE,GAAkB,cAACpC,EAAD,CAAQY,QAASuB,EAAjB,wBApBvB,WACE,IAAIG,EAaJ,OAZItF,EAAMD,OAAS,IACjBuF,EAAYtF,EAAMQ,KAAI,SAACL,GACrB,OACE,eAACoF,EAAD,WACE,8BAAMpF,EAAKL,OACX,cAAC0F,EAAD,CAAS9B,GAAIvD,EAAKL,KAAM8D,QAASP,EAAjC,UAbWtD,EAcII,EAAKJ,OAbrB,YAAIK,MAAML,IAASS,KAAI,SAACiF,EAAM7D,GACnC,OAAO,cAAC8D,EAAD,GAAe9D,WASEzB,EAAKL,MAXb,IAACC,MAoBZuF,EAOJK,OAODJ,EAAgBtC,IAAOa,IAAV,oDAIb0B,EAAUvC,IAAOa,IAAV,6JAQP4B,EAAWzC,IAAOa,IAAV,6JAURuB,EAAqBpC,IAAOa,IAAV,8FCtDlB8B,EAAiBhI,EAAQ,IAGzBiI,EAAU,SAAC7F,EAAO8F,GACtB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO/F,EAAMgG,QAAO,SAAC7F,GAAD,OAAUA,EAAKL,OAASgG,EAAOhG,QACrD,IAAK,kBACH,MAAO,GACT,IAAK,cACH,OAAO8F,EAAe9H,UAAUM,MAAMwB,aACxC,QACE,MAAM,IAAIqG,MAAM,UA4KPC,MAxKf,WAEE,MAAoDzB,mBAASmB,EAAe9H,UAAUM,MAAMsB,MAA5F,mBAAOyG,EAAP,KAA2BC,EAA3B,KACA,EAAoD3B,mBAASmB,EAAe7H,UAAUK,MAAMsB,MAA5F,mBAAO2G,EAAP,KAA2BC,EAA3B,KAGA,EAA0C7B,oBAAS,GAAnD,mBAAO8B,EAAP,KAAsBC,EAAtB,KACA,EAAiCC,qBAAWZ,EAASD,EAAe9H,UAAUM,MAAMwB,cAApF,mBAAOA,EAAP,KAAqB8G,EAArB,KACA,EAAsCjC,mBAAS,MAA/C,mBAAOK,EAAP,KAAoB6B,EAApB,KACA,EAAoClC,mBAAS,MAA7C,mBAAOlB,EAAP,KAAmBqD,EAAnB,KACA,EAA4CnC,oBAAS,GAArD,mBAAOW,EAAP,KAAuByB,EAAvB,KAGA,EAAsCpC,oBAAS,GAA/C,mBAAOqC,EAAP,KAAoBC,EAApB,KACA,EAAgCtC,oBAAS,GAAzC,mBAAOzG,EAAP,KAAiBgJ,EAAjB,KACA,EAAoCvC,mBAAS,MAA7C,mBAAOwC,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACoB,IAAxBvH,EAAaG,QAAc8G,GAAkB,KAChD,CAACjH,IAEJ,IA0EMwH,GAAiB,WACrB,IAAInJ,EAAS2H,EAAepH,eACxBP,IACFiJ,EAAc,GAAD,OAAIjJ,EAAJ,WACb+I,GAAY,IAEd/I,EAAS,MAwBX,OACE,cAACoJ,EAAD,UACE,eAACC,EAAD,WACE,cAAC,EAAD,KACER,GACA,eAACS,EAAD,WACE,cAAC,EAAD,CACE7H,KAAMyG,EACNrB,YAAaA,EACbvB,WAAYA,EACZH,YA9FQ,SAACoE,GACnB,GAAI1C,EAAa,CACf,IAAM/D,EAAc,GAChBqD,EAAOqD,SAASD,EAAEE,OAAOhE,IAC7B,GAAIoB,EAAY9D,WACd,IAAK,IAAIV,EAAI,EAAGA,EAAIwE,EAAY/E,OAAQO,GAAK,EAAG,CAC9C,IAAMM,EAAM4G,EAAEE,OAAOhE,GAAG,GAClBiE,EAAWF,SAAS,GAAD,OAAI7G,EAAJ,MACrBwD,EAAOU,EAAY/E,OAAS4H,IAAUvD,EAAOuD,EAAW7C,EAAY/E,OAAS,GACjF,IAAIc,EAASuD,EAAO9D,EAChBO,EAAS,KAAIA,EAAS,IAAMA,GAChCE,EAAY6G,KAAK/G,EAAOgH,iBAG1B,IAAK,IAAIvH,EAAI,EAAGA,EAAIwE,EAAY/E,OAAQO,GAAK,EAAG,CAC9C,IAAMO,EAAS2G,EAAEE,OAAOhE,GAAG,GACrBoE,EAAcL,SAAS,IAAD,OAAK5G,IAC7BuD,EAA4B,GAArBU,EAAY/E,OAAc+H,IAAa1D,EAAO0D,EAAmC,GAArBhD,EAAY/E,OAAc,IACjG,IAAIa,EAAMwD,EAAW,GAAJ9D,EACbM,EAAM,KAAIA,EAAM,IAAMA,GAC1BG,EAAY6G,KAAKhH,EAAIiH,YAGzBjB,GAAc,SAACrD,GAAD,OAAgBxC,OAwEtBsC,YA9GY,SAACmE,GACvB,GAAK1C,GACD0C,EAAEE,OAAOhE,IAAM,MAAQ8D,EAAEE,OAAOhE,IAAM,KAAM,CAC9C,IAAM9C,EAAMmH,OAAOP,EAAEE,OAAOhE,GAAG,IACzB7C,EAASkH,OAAOP,EAAEE,OAAOhE,GAAG,IACRkC,EAAe9H,UAAUM,MAAM8D,cAAc4C,EAAalE,EAAKC,KAEvFuF,EAAsBR,EAAe9H,UAAUM,MAAMsB,MACrDgH,EAAS,CAAEX,KAAM,cAAejG,KAAMgF,EAAYhF,OAClD6G,EAAe,MACfC,GAAc,MAqGRtD,iBArEa,SAACkE,GACxBA,EAAEQ,iBACGlD,GACD0C,EAAEE,OAAOhE,IAAM,MAAQ8D,EAAEE,OAAOhE,IAAM,MACxCoB,EAAYhC,YAmELyD,GACC,cAAC,EAAD,CACEvG,MAAOJ,EACPyD,YAzHW,SAACmE,GACxB,IAAMS,EAAerI,EAAaoG,QAAO,SAACvF,GAAD,OAASA,EAAIX,OAAS0H,EAAEE,OAAOQ,WAAWxE,MACnFiD,GAAe,SAAC7B,GAAD,OAAiBmD,EAAa,OAwHjC/C,yBA5BmB,WAC/BU,EAAe9H,UAAUM,MAAMC,sBAC/BuH,EAAe9H,UAAUM,MAAMG,sBAC/B6H,EAAsBR,EAAe9H,UAAUM,MAAMsB,MACrDmH,GAAkB,GAClBD,GAAc,GACdD,EAAe,MACfD,EAAS,CAAEX,KAAM,qBAsBLZ,UAtDI,WAChB4B,GAAe,GACfF,GAAkB,IAqDNzB,eAAgBA,OAMvB0B,GACC,eAACqB,EAAD,WACE,cAAC,EAAD,CAAezI,KAAMyG,EAAoB7B,YAAa,eACtD,cAAC,EAAD,CAAeD,cA9EL,SAACmD,GACnB,IAAMlI,EAAIyI,OAAOP,EAAEE,OAAOhE,GAAG,IACvBnE,EAAIwI,OAAOP,EAAEE,OAAOhE,GAAG,IAC7B,IAAI2C,EAAmB/G,GAAGC,GAAGZ,IAA7B,CACA,IAAIC,EAASgH,EAAe9H,UAAUc,OAAOgH,EAAe7H,UAAUK,MAAOkB,EAAGC,GAChF+G,EAAsBV,EAAe7H,UAAUK,MAAMsB,MACjDd,EAAOC,SACTuI,MAEKxB,EAAelH,aACtB0I,KACAhB,EAAsBR,EAAe9H,UAAUM,MAAMsB,SAmEFA,KAAM2G,EAAoB7C,IAAI,EAAMc,YAAa,qBAG/FtG,GACC,gCACE,4BAAIiJ,IACJ,cAACjE,EAAD,CAAQY,QAxDM,WACtBmD,GAAe,GACfC,GAAY,GACZE,EAAc,MACdd,EAAsBR,EAAe9H,UAAUM,MAAMsB,MACrD4G,EAAsBV,EAAe7H,UAAUK,MAAMsB,MACrD8G,GAAiB,GACjBZ,EAAe9G,cACf4H,EAAS,CAAEX,KAAM,iBAgDT,iCAUNsB,EAAcpE,IAAOa,IAAV,kHAOXwD,EAAerE,IAAOa,IAAV,kHAOZyD,EAA8BtE,IAAOa,IAAV,kKAS3BqE,EAA8BlF,IAAOa,IAAV,yKCnNjCsE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,gBCH1BzJ,EAAOC,QANmB,WAGxB,MAAO,CAAEM,EAFCmJ,KAAKC,MAAsB,GAAhBD,KAAK9H,UAEdpB,EADFkJ,KAAKC,MAAsB,GAAhBD,KAAK9H,c","file":"static/js/main.b0ce0044.chunk.js","sourcesContent":["const Player = require('./player');\n\nconst GameController = (() => {\n  const playerOne = Player();\n  const playerTwo = Player(true);\n  let gameOver = false;\n  let winner = null;\n\n  let playerOneTurn = true;\n\n  const changeTurn = () => {\n    playerOneTurn = !playerOneTurn;\n    let hit = true;\n    if (!playerOneTurn) {\n      while (hit) {\n        let didHit = playerTwo.attack(playerOne.board);\n        if (!didHit.checkHit) hit = false;\n        if (winCondition()) hit = false; //simulate move to next round\n      }\n      changeTurn();\n    }\n  };\n\n  const restartGame = () => {\n    playerOne.board.clearShipsFromBoard();\n    playerTwo.board.clearShipsFromBoard();\n    playerOne.board.resetShips();\n    playerTwo.board.resetShips();\n    playerTwo.board.randomShipPlacement();\n  };\n\n  const winCondition = () => {\n    if (playerOneTurn) {\n      if (playerTwo.board.checkAllShipsSunk()) {\n        gameOver = true;\n        winner = 'player one';\n        restartGame();\n        return winner;\n      }\n    } else {\n      if (playerOne.board.checkAllShipsSunk()) {\n        gameOver = true;\n        winner = 'player two';\n        restartGame();\n        return winner;\n      }\n    }\n    return false;\n  };\n\n  const resetWinner = () => {\n    winner = null;\n  };\n\n  return {\n    get playerOne() {\n      return playerOne;\n    },\n    get playerTwo() {\n      return playerTwo;\n    },\n    get gameOver() {\n      return gameOver;\n    },\n    changeTurn,\n    winCondition,\n    resetWinner,\n  };\n})();\n\nmodule.exports = GameController;\n","const Gameboard = require('./gameboard');\nconst randomCoordinates = require('./randomCoordinates');\n\nconst Player = (boolean) => {\n  const isAI = boolean;\n  const board = Gameboard();\n  if (isAI) board.randomShipPlacement();\n\n  const placeHit = (board, x, y) => {\n    const checkHit = board.receiveAttack(x, y);\n    return { x, y, checkHit };\n  };\n\n  const aiAttack = (board) => {\n    const { x, y } = randomCoordinates();\n    if (board.grid[x][y].hit === true) {\n      aiAttack(board);\n    }\n    const hit = placeHit(board, x, y);\n    return hit;\n  };\n\n  const attack = (board, x, y) => {\n    let hitCoordinates = {};\n    if (isAI === true) {\n      hitCoordinates = aiAttack(board);\n      return hitCoordinates;\n    }\n    hitCoordinates = placeHit(board, x, y);\n    return hitCoordinates;\n  };\n\n  return {\n    get board() {\n      return board;\n    },\n    attack,\n  };\n};\n\nmodule.exports = Player;\n","const Ship = require('./ship');\nconst randomCoordinates = require('./randomCoordinates');\n\nconst Gameboard = () => {\n  let grid = [];\n  const shipNamesAndLengths = [\n    { name: 'destroyer', length: 2 },\n    { name: 'submarine', length: 3 },\n    { name: 'cruiser', length: 3 },\n    { name: 'battleship', length: 4 },\n    { name: 'carrier', length: 5 },\n  ];\n  let ships = [];\n  let shipsToPlace = [];\n\n  const buildGrid = () => {\n    const gridObj = { ship: false, hit: false };\n    grid = new Array(10);\n    grid.fill(gridObj, 0);\n    for (let i = 0; i < grid.length; i += 1) {\n      grid[i] = new Array(10);\n      grid[i].fill(gridObj, 0);\n    }\n  };\n\n  const buildShips = () => shipNamesAndLengths.map((obj) => Ship(obj.name, obj.length));\n\n  const resetShips = () => (ships = buildShips());\n\n  const clearShipsFromBoard = () => buildGrid();\n\n  const validateShipPlacement = (ship, random = false, row, column) => {\n    if (random) {\n      let illegalPlacement = true;\n      let coordinates = { x: 0, y: 0 };\n      while (illegalPlacement) {\n        coordinates = randomCoordinates();\n        if (ship.horizontal === true) {\n          coordinates.y = fitShipToGrid(ship.length, coordinates.y);\n        } else {\n          coordinates.x = fitShipToGrid(ship.length, coordinates.x);\n        }\n        illegalPlacement = checkForShipClash(ship.length, ship.horizontal, coordinates.x, coordinates.y);\n      }\n      return coordinates;\n    }\n    // validation for user selected placement\n    let illegalPlacement = true;\n    let coordinates = { row, column };\n    if (ship.horizontal === true) {\n      coordinates.column = fitShipToGrid(ship.length, coordinates.column);\n    } else coordinates.row = fitShipToGrid(ship.length, coordinates.row);\n    illegalPlacement = checkForShipClash(ship.length, ship.horizontal, coordinates.row, coordinates.column);\n    if (illegalPlacement) return;\n    return coordinates;\n  };\n\n  const checkForShipClash = (shipLength, horizontal, startX, startY) => {\n    if (horizontal) {\n      for (let i = 0; i < shipLength; i += 1) {\n        if (grid[startX][startY + i].ship) {\n          return true;\n        }\n      }\n      return false;\n    }\n    for (let i = 0; i < shipLength; i += 1) {\n      if (grid[startX + i][startY].ship) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const fitShipToGrid = (shipLength, startPosition) => {\n    if (startPosition + shipLength > 9) {\n      startPosition = 9 - shipLength + 1;\n      return startPosition;\n    }\n    return startPosition;\n  };\n\n  const randomShipPlacement = () => {\n    let random = true;\n    ships.forEach((ship) => {\n      ship.randomOrientation();\n      const { x, y } = validateShipPlacement(ship, random);\n      placeShip(ship, x, y);\n    });\n  };\n\n  const placeHorizontal = (row, column, ship) =>\n    grid.map((r, rIndex) =>\n      r.map((c, cIndex) =>\n        rIndex === row && cIndex >= column && cIndex < column + ship.length ? { ...c, ship: { name: ship.name, index: cIndex - column } } : c\n      )\n    );\n\n  const placeVertical = (row, column, ship) =>\n    grid.map((r, rIndex) =>\n      r.map((c, cIndex) =>\n        cIndex === column && rIndex >= row && rIndex < row + ship.length ? { ...c, ship: { name: ship.name, index: rIndex - row } } : c\n      )\n    );\n\n  const placeShip = (ship, row, column) => {\n    let newGrid = [];\n    if (ship.horizontal) newGrid = placeHorizontal(row, column, ship);\n    else newGrid = placeVertical(row, column, ship);\n    grid = newGrid;\n    return;\n  };\n\n  const placeUserShip = (ship, row, column) => {\n    let newGrid = [];\n    let coordinates = validateShipPlacement(ship, false, row, column);\n    if (!coordinates) return false;\n    if (ship.horizontal) newGrid = placeHorizontal(coordinates.row, coordinates.column, ship);\n    else newGrid = placeVertical(coordinates.row, coordinates.column, ship);\n    grid = newGrid;\n    return true;\n  };\n\n  const findShipByName = (name) => ships.find((obj) => obj.name === name);\n\n  const checkShipHit = (i, j) => {\n    if (grid[i][j].ship !== false && grid[i][j].hit === true) return true;\n  };\n\n  const receiveAttack = (i, j) => {\n    if (grid[i][j].hit) return;\n    if (grid[i][j].ship !== false && grid[i][j].hit === false) {\n      const shipObj = grid[i][j].ship;\n      const hitShip = findShipByName(shipObj.name);\n      hitShip.hit(shipObj.index);\n    }\n    const newGrid = grid.map((row, indexX) =>\n      row.map((element, indexY) => {\n        if (indexX === i && indexY === j) {\n          return {\n            ...element,\n            hit: true,\n          };\n        }\n        return element;\n      })\n    );\n    grid = newGrid;\n    if (checkShipHit(i, j)) return true;\n    return false;\n  };\n\n  const checkAllShipsSunk = () => {\n    if (ships.every((ship) => ship.sunk === true)) return true;\n    return false;\n  };\n\n  buildGrid();\n  ships = buildShips();\n  shipsToPlace = buildShips();\n\n  return {\n    get grid() {\n      return grid;\n    },\n    get ships() {\n      return ships;\n    },\n    get shipsToPlace() {\n      return shipsToPlace;\n    },\n    buildGrid,\n    buildShips,\n    resetShips,\n    clearShipsFromBoard,\n    randomShipPlacement,\n    placeShip,\n    placeUserShip,\n    receiveAttack,\n    checkAllShipsSunk,\n  };\n};\n\nmodule.exports = Gameboard;\n","const randomCoordinates = require('./randomCoordinates');\n\nconst Ship = (name, length) => {\n  let sunk = false;\n  let horizontal = true;\n\n  const hits = Array(length).fill(false);\n\n  const hit = (position) => {\n    if (position <= hits.length) hits[position] = true;\n    sinkShip();\n  };\n\n  const sinkShip = () => {\n    if (hits.every((hit) => hit === true)) sunk = true;\n  };\n\n  const rotate = () => {\n    horizontal = !horizontal;\n  };\n\n  const randomOrientation = () => {\n    const { x } = randomCoordinates();\n    for (let i = 0; i < x; i += 1) {\n      rotate();\n    }\n  };\n\n  return {\n    name,\n    length,\n    hit,\n    rotate,\n    randomOrientation,\n    get sunk() {\n      return sunk;\n    },\n    get hits() {\n      return hits;\n    },\n    get horizontal() {\n      return horizontal;\n    },\n  };\n};\n\nmodule.exports = Ship;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  color: #fff;\n  text-transform: uppercase;\n  text-decoration: none;\n  background: none rgba(255, 255, 255, 0.2);\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  display: inline-block;\n  transition: all 0.4s ease 0s;\n  margin-bottom: 5px;\n  &:hover {\n    background: none rgba(255, 255, 255, 0.4);\n    transition: all 0.4s ease 0s;\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Cell = ({ coordinates, handleHover, handleClick, handleRightClick, isHovering, ship, hit, ai }) => {\n  return (\n    <BattleCell\n      id={coordinates}\n      onMouseEnter={handleHover}\n      onClick={handleClick}\n      isHovering={isHovering}\n      ship={ship}\n      hit={hit}\n      onContextMenu={handleRightClick}\n      ai={ai}\n    />\n  );\n};\n\nexport default Cell;\n\nconst handleCellColour = (props) => {\n  if (props.isHovering && props.isHovering.includes(props.id)) return 'pink';\n  if (props.ship && props.hit) return 'red';\n  if (!props.ai) {\n    if (props.ship) return 'pink';\n  }\n  if (props.hit) return 'grey';\n\n  return '#df645f';\n};\n\nconst BattleCell = styled.div`\n  border: 1px solid white;\n  border-radius: 4px;\n  height: auto;\n  background: ${(props) => handleCellColour(props)};\n  transition: all 0.8s ease;\n  &:hover {\n    cursor: crosshair;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Cell from './Cell';\n\nconst GridContainer = (props) => {\n  const playerGrid = props.grid.map((row, indexX) => {\n    return row.map((cell, indexY) => {\n      return (\n        <Cell\n          key={`${indexX}${indexY}`}\n          coordinates={`${indexX}${indexY}`}\n          handleClick={props.clickFunction}\n          ship={cell.ship ? true : false}\n          hit={cell.hit ? true : false}\n          ai={props.ai}\n        />\n      );\n    });\n  });\n\n  return (\n    <div>\n      <h2>{props.playerTitle}</h2>\n      <GridBox>{playerGrid}</GridBox>\n    </div>\n  );\n};\n\nexport default GridContainer;\n\nexport const GridBox = styled.div`\n  width: 400px;\n  height: 400px;\n  display: grid;\n  grid-template-columns: repeat(10, 10%);\n  margin: 10px 20px 10px 0px;\n`;\n","import React, { Fragment, useState } from 'react';\nimport { Button } from './commonStyling';\nimport styled from 'styled-components';\n\nconst Header = () => {\n  const [viewInstruction, setViewInstructions] = useState(false);\n\n  const toggleInstructions = () => {\n    setViewInstructions((viewInstruction) => !viewInstruction);\n  };\n\n  return (\n    <HeaderWrapper>\n      <h1>Battleships</h1>\n      <p>The classic battleships game from when you were a kid (or maybe you still enjoy it?)</p>\n      <Button onClick={toggleInstructions}>{viewInstruction ? 'hide' : 'show'} instructions</Button>\n      {viewInstruction && (\n        <Fragment>\n          <p>\n            <b>Placing ships:</b> select a ship by clicking on it. Rotate the ship by right clicking inside the grid. Left click to place.\n          </p>\n          <p>\n            <b>Attacking ships:</b> select an empty cell on your opponent's grid to attack it. If you hit, you get another turn!\n          </p>\n        </Fragment>\n      )}\n    </HeaderWrapper>\n  );\n};\n\nexport default Header;\n\nconst HeaderWrapper = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import React from 'react';\nimport Cell from './Cell';\nimport { GridBox } from './GridContainer';\n\nconst PlacementGrid = ({ grid, placingShip, isHovering, handleHover, handleClick, handleRightClick }) => {\n  const placementGrid = grid.map((row, indexX) => {\n    return row.map((cell, indexY) => {\n      return (\n        <Cell\n          key={`${indexX}${indexY}`}\n          cellID={`${indexX}${indexY}`}\n          coordinates={`${indexX}${indexY}`}\n          isHovering={isHovering}\n          handleHover={handleHover}\n          handleClick={handleClick}\n          handleRightClick={handleRightClick}\n          ship={cell.ship ? true : false}\n        />\n      );\n    });\n  });\n\n  return (\n    <div>\n      <GridBox>{placementGrid}</GridBox>\n    </div>\n  );\n};\n\nexport default PlacementGrid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from './commonStyling';\n\nconst ShipPanel = ({ ships, handleClick, playerOneRandomPlacement, startGame, allShipsPlaced }) => {\n  const shipDiagram = (length) => {\n    return [...Array(length)].map((item, index) => {\n      return <ShipCell key={index} />;\n    });\n  };\n\n  function displayShips() {\n    let shipPanel;\n    if (ships.length > 0) {\n      shipPanel = ships.map((ship) => {\n        return (\n          <ShipContainer key={ship.name}>\n            <div>{ship.name}</div>\n            <ShipBox id={ship.name} onClick={handleClick}>\n              {shipDiagram(ship.length)}\n            </ShipBox>\n          </ShipContainer>\n        );\n      });\n    }\n    return shipPanel;\n  }\n\n  return (\n    <ShipPanelContainer>\n      <Button onClick={playerOneRandomPlacement}>Random Placement</Button>\n      {allShipsPlaced && <Button onClick={startGame}>Start Game</Button>}\n      {displayShips()}\n    </ShipPanelContainer>\n  );\n};\n\nexport default ShipPanel;\n\nconst ShipContainer = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst ShipBox = styled.div`\n  width: 40px;\n  height: 40px;\n  display: grid;\n  grid-template-columns: repeat(5, 100%);\n  grid-auto-columns: min-content;\n`;\n\nconst ShipCell = styled.div`\n  border: 1px solid white;\n  border-radius: 4px;\n  height: auto;\n  background: pink;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ShipPanelContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n`;\n","import { useState, useReducer, useEffect, Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Button } from './components/commonStyling';\nimport GridContainer from './components/GridContainer';\nimport Header from './components/Header';\nimport PlacementGrid from './components/PlacementGrid';\nimport ShipPanel from './components/ShipPanel';\nconst gameController = require('./factories/gamecontroller');\n\n// reducer function for managing ships that player is still to place on the board\nconst reducer = (ships, action) => {\n  switch (action.type) {\n    case 'placed ship':\n      return ships.filter((ship) => ship.name !== action.name);\n    case 'randomly placed':\n      return {};\n    case 'reset ships':\n      return gameController.playerOne.board.shipsToPlace;\n    default:\n      throw new Error('oops');\n  }\n};\n\nfunction App() {\n  // board states\n  const [playerOneGridState, setPlayerOneGridState] = useState(gameController.playerOne.board.grid);\n  const [playerTwoGridState, setPlayerTwoGridState] = useState(gameController.playerTwo.board.grid);\n\n  // state management for placing player's ships\n  const [showShipPanel, setShowShipPanel] = useState(true);\n  const [shipsToPlace, dispatch] = useReducer(reducer, gameController.playerOne.board.shipsToPlace);\n  const [placingShip, setPlacingShip] = useState(null);\n  const [isHovering, setIsHovering] = useState(null);\n  const [allShipsPlaced, setAllShipsPlaced] = useState(false);\n\n  // game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWinner, setGameWinner] = useState(null);\n\n  useEffect(() => {\n    if (shipsToPlace.length === 0) setAllShipsPlaced(true);\n  }, [shipsToPlace]);\n\n  const handleShipPickUp = (e) => {\n    const selectedShip = shipsToPlace.filter((obj) => obj.name === e.target.parentNode.id);\n    setPlacingShip((placingShip) => selectedShip[0]);\n  };\n\n  const handlePlaceShip = (e) => {\n    if (!placingShip) return;\n    if (e.target.id >= '00' && e.target.id <= '99') {\n      const row = Number(e.target.id[0]);\n      const column = Number(e.target.id[1]);\n      let successfulPlacement = gameController.playerOne.board.placeUserShip(placingShip, row, column);\n      if (successfulPlacement) {\n        setPlayerOneGridState(gameController.playerOne.board.grid);\n        dispatch({ type: 'placed ship', name: placingShip.name });\n        setPlacingShip(null);\n        setIsHovering(false);\n      }\n    }\n  };\n\n  const handleHover = (e) => {\n    if (placingShip) {\n      const coordinates = [];\n      let cell = parseInt(e.target.id);\n      if (placingShip.horizontal) {\n        for (let i = 0; i < placingShip.length; i += 1) {\n          const row = e.target.id[0];\n          const rowLimit = parseInt(`${row}9`);\n          if (cell + placingShip.length > rowLimit) cell = rowLimit - placingShip.length + 1;\n          let column = cell + i;\n          if (column < 10) column = '0' + column;\n          coordinates.push(column.toString());\n        }\n      } else {\n        for (let i = 0; i < placingShip.length; i += 1) {\n          const column = e.target.id[1];\n          const columnLimit = parseInt(`9${column}`);\n          if (cell + placingShip.length * 10 > columnLimit) cell = columnLimit - placingShip.length * 10 + 10;\n          let row = cell + i * 10;\n          if (row < 10) row = '0' + row;\n          coordinates.push(row.toString());\n        }\n      }\n      setIsHovering((isHovering) => coordinates);\n    }\n  };\n\n  const handleRightClick = (e) => {\n    e.preventDefault();\n    if (!placingShip) return;\n    if (e.target.id >= '00' && e.target.id <= '99') {\n      placingShip.rotate();\n    }\n  };\n\n  const handleClick = (e) => {\n    const x = Number(e.target.id[0]);\n    const y = Number(e.target.id[1]);\n    if (playerTwoGridState[x][y].hit) return; // check hit has not already been placed in cell\n    let attack = gameController.playerOne.attack(gameController.playerTwo.board, x, y);\n    setPlayerTwoGridState(gameController.playerTwo.board.grid);\n    if (attack.checkHit) {\n      checkforWinner();\n      return;\n    } else gameController.changeTurn();\n    checkforWinner();\n    setPlayerOneGridState(gameController.playerOne.board.grid);\n  };\n\n  const startGame = () => {\n    setGameStarted(true);\n    setAllShipsPlaced(false);\n  };\n\n  const checkforWinner = () => {\n    let winner = gameController.winCondition();\n    if (winner) {\n      setGameWinner(`${winner} wins!`);\n      setGameOver(true);\n    }\n    winner = null;\n  };\n\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setGameOver(false);\n    setGameWinner(null);\n    setPlayerOneGridState(gameController.playerOne.board.grid);\n    setPlayerTwoGridState(gameController.playerTwo.board.grid);\n    setShowShipPanel(true);\n    gameController.resetWinner();\n    dispatch({ type: 'reset ships' });\n  };\n\n  const playerOneRandomPlacement = () => {\n    gameController.playerOne.board.clearShipsFromBoard();\n    gameController.playerOne.board.randomShipPlacement();\n    setPlayerOneGridState(gameController.playerOne.board.grid);\n    setAllShipsPlaced(true);\n    setIsHovering(false);\n    setPlacingShip(null);\n    dispatch({ type: 'randomly placed' });\n  };\n\n  return (\n    <PageWrapper>\n      <AppContainer>\n        <Header />\n        {!gameStarted && (\n          <PlayerOnePlacementContainer>\n            <PlacementGrid\n              grid={playerOneGridState}\n              placingShip={placingShip}\n              isHovering={isHovering}\n              handleHover={handleHover}\n              handleClick={handlePlaceShip}\n              handleRightClick={handleRightClick}\n            />\n            {showShipPanel && (\n              <ShipPanel\n                ships={shipsToPlace}\n                handleClick={handleShipPickUp}\n                playerOneRandomPlacement={playerOneRandomPlacement}\n                startGame={startGame}\n                allShipsPlaced={allShipsPlaced}\n              />\n            )}\n            {/* {allShipsPlaced && <Button onClick={startGame}>start</Button>} */}\n          </PlayerOnePlacementContainer>\n        )}\n        {gameStarted && (\n          <TwoPlayerPlacementContainer>\n            <GridContainer grid={playerOneGridState} playerTitle={'Your board'} />\n            <GridContainer clickFunction={handleClick} grid={playerTwoGridState} ai={true} playerTitle={\"Enemy's board\"} />\n          </TwoPlayerPlacementContainer>\n        )}\n        {gameOver && (\n          <div>\n            <p>{gameWinner}</p>\n            <Button onClick={handlePlayAgain}>Play again</Button>\n          </div>\n        )}\n      </AppContainer>\n    </PageWrapper>\n  );\n}\n\nexport default App;\n\nconst PageWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst AppContainer = styled.div`\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst PlayerOnePlacementContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  border-radius: 8px;\n  background: #df645f;\n  width: 800px;\n`;\n\nconst TwoPlayerPlacementContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  border-radius: 8px;\n  background: #df645f;\n  width: 1200px;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","const randomCoordinates = () => {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  return { x, y };\n};\n\nmodule.exports = randomCoordinates;\n"],"sourceRoot":""}