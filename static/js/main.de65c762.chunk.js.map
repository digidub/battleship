{"version":3,"sources":["components/commonStyling.js","components/Cell.jsx","components/GridContainer.jsx","components/Header.jsx","components/PlacementGrid.jsx","components/ShipPanel.jsx","factories/randomCoordinates.js","factories/ship.js","factories/gameboard.js","factories/player.js","factories/gamecontroller.js","App.js","index.js"],"names":["Button","styled","button","Cell","coordinates","handleHover","handleClick","handleRightClick","isHovering","ship","hit","ai","BattleCell","id","onMouseEnter","onClick","onContextMenu","div","props","includes","handleCellColour","GridContainer","playerGrid","grid","map","row","indexX","cell","indexY","clickFunction","playerTitle","GridBox","Header","useState","viewInstruction","setViewInstructions","HeaderWrapper","PlacementGrid","placingShip","placementGrid","cellID","ShipPanel","ships","playerOneRandomPlacement","startGame","allShipsPlaced","ShipPanelContainer","shipPanel","length","ShipContainer","name","ShipBox","Array","item","index","ShipCell","displayShips","randomCoordinates","x","Math","floor","random","y","Ship","sunk","horizontal","hits","fill","sinkShip","every","rotate","position","randomOrientation","i","Gameboard","shipsToPlace","shipNamesAndLengths","buildGrid","gridObj","buildShips","obj","validateShipPlacement","column","illegalPlacement","fitShipToGrid","checkForShipClash","shipLength","startX","startY","startPosition","placeHorizontal","r","rIndex","c","cIndex","placeVertical","placeShip","newGrid","resetShips","clearShipsFromBoard","randomShipPlacement","forEach","placeUserShip","receiveAttack","j","shipObj","find","element","checkShipHit","checkAllShipsSunk","Player","boolean","isAI","board","placeHit","checkHit","aiAttack","attack","GameController","playerOne","playerTwo","gameOver","winner","playerOneTurn","restartGame","winCondition","changeTurn","resetWinner","reducer","action","type","filter","gameController","Error","App","playerOneGridState","setPlayerOneGridState","playerTwoGridState","setPlayerTwoGridState","showShipPanel","setShowShipPanel","useReducer","dispatch","setPlacingShip","setIsHovering","setAllShipsPlaced","gameStarted","setGameStarted","setGameOver","gameWinner","setGameWinner","useEffect","checkforWinner","PageWrapper","AppContainer","PlayerOnePlacementContainer","e","parseInt","target","rowLimit","push","toString","columnLimit","Number","preventDefault","selectedShip","parentNode","TwoPlayerPlacementContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de65c762.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  color: #fff;\n  text-transform: uppercase;\n  text-decoration: none;\n  background: none rgba(255, 255, 255, 0.2);\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  display: inline-block;\n  transition: all 0.4s ease 0s;\n  margin-bottom: 5px;\n  &:hover {\n    background: none rgba(255, 255, 255, 0.4);\n    transition: all 0.4s ease 0s;\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Cell = ({ coordinates, handleHover, handleClick, handleRightClick, isHovering, ship, hit, ai }) => {\n  return (\n    <BattleCell\n      id={coordinates}\n      onMouseEnter={handleHover}\n      onClick={handleClick}\n      isHovering={isHovering}\n      ship={ship}\n      hit={hit}\n      onContextMenu={handleRightClick}\n      ai={ai}\n    />\n  );\n};\n\nexport default Cell;\n\nconst handleCellColour = (props) => {\n  if (props.isHovering && props.isHovering.includes(props.id)) return 'pink';\n  if (props.ship && props.hit) return 'red';\n  if (!props.ai) {\n    if (props.ship) return 'pink';\n  }\n  if (props.hit) return 'grey';\n\n  return '#df645f';\n};\n\nconst BattleCell = styled.div`\n  border: 1px solid white;\n  border-radius: 4px;\n  height: auto;\n  background: ${(props) => handleCellColour(props)};\n  transition: all 0.8s ease;\n  &:hover {\n    cursor: crosshair;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Cell from './Cell';\n\nconst GridContainer = (props) => {\n  const playerGrid = props.grid.map((row, indexX) => {\n    return row.map((cell, indexY) => {\n      return (\n        <Cell\n          key={`${indexX}${indexY}`}\n          coordinates={`${indexX}${indexY}`}\n          handleClick={props.clickFunction}\n          ship={cell.ship ? true : false}\n          hit={cell.hit ? true : false}\n          ai={props.ai}\n        />\n      );\n    });\n  });\n\n  return (\n    <div>\n      <h2>{props.playerTitle}</h2>\n      <GridBox>{playerGrid}</GridBox>\n    </div>\n  );\n};\n\nexport default GridContainer;\n\nexport const GridBox = styled.div`\n  width: 400px;\n  height: 400px;\n  display: grid;\n  grid-template-columns: repeat(10, 10%);\n  margin: 10px 20px 10px 0px;\n`;\n","import React, { Fragment, useState } from 'react';\nimport { Button } from './commonStyling';\nimport styled from 'styled-components';\n\nconst Header = () => {\n  const [viewInstruction, setViewInstructions] = useState(false);\n\n  const toggleInstructions = () => {\n    setViewInstructions((viewInstruction) => !viewInstruction);\n  };\n\n  return (\n    <HeaderWrapper>\n      <h1>Battleships</h1>\n      <p>The classic battleships game from when you were a kid (or maybe you still enjoy it?)</p>\n      <Button onClick={toggleInstructions}>{viewInstruction ? 'hide' : 'show'} instructions</Button>\n      {viewInstruction && (\n        <Fragment>\n          <p>\n            <b>Placing ships:</b> select a ship by clicking on it. Rotate the ship by right clicking inside the grid. Left click to place.\n          </p>\n          <p>\n            <b>Attacking ships:</b> select an empty cell on your opponent's grid to attack it. If you hit, you get another turn!\n          </p>\n        </Fragment>\n      )}\n    </HeaderWrapper>\n  );\n};\n\nexport default Header;\n\nconst HeaderWrapper = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import React from 'react';\nimport Cell from './Cell';\nimport { GridBox } from './GridContainer';\n\nconst PlacementGrid = ({ grid, placingShip, isHovering, handleHover, handleClick, handleRightClick }) => {\n  const placementGrid = grid.map((row, indexX) => {\n    return row.map((cell, indexY) => {\n      return (\n        <Cell\n          key={`${indexX}${indexY}`}\n          cellID={`${indexX}${indexY}`}\n          coordinates={`${indexX}${indexY}`}\n          isHovering={isHovering}\n          handleHover={handleHover}\n          handleClick={handleClick}\n          handleRightClick={handleRightClick}\n          ship={cell.ship ? true : false}\n        />\n      );\n    });\n  });\n\n  return (\n    <div>\n      <GridBox>{placementGrid}</GridBox>\n    </div>\n  );\n};\n\nexport default PlacementGrid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from './commonStyling';\n\nconst ShipPanel = ({ ships, handleClick, playerOneRandomPlacement, startGame, allShipsPlaced }) => {\n  const shipDiagram = (length) => {\n    return [...Array(length)].map((item, index) => {\n      return <ShipCell key={index} />;\n    });\n  };\n\n  function displayShips() {\n    let shipPanel;\n    if (ships.length > 0) {\n      shipPanel = ships.map((ship) => {\n        return (\n          <ShipContainer key={ship.name}>\n            <div>{ship.name}</div>\n            <ShipBox id={ship.name} onClick={handleClick}>\n              {shipDiagram(ship.length)}\n            </ShipBox>\n          </ShipContainer>\n        );\n      });\n    }\n    return shipPanel;\n  }\n\n  return (\n    <ShipPanelContainer>\n      <Button onClick={playerOneRandomPlacement}>Random Placement</Button>\n      {allShipsPlaced && <Button onClick={startGame}>Start Game</Button>}\n      {displayShips()}\n    </ShipPanelContainer>\n  );\n};\n\nexport default ShipPanel;\n\nconst ShipContainer = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst ShipBox = styled.div`\n  width: 40px;\n  height: 40px;\n  display: grid;\n  grid-template-columns: repeat(5, 100%);\n  grid-auto-columns: min-content;\n`;\n\nconst ShipCell = styled.div`\n  border: 1px solid white;\n  border-radius: 4px;\n  height: auto;\n  background: pink;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ShipPanelContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n`;\n","const randomCoordinates = () => {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  return { x, y };\n};\n\nexport default randomCoordinates;\n","import randomCoordinates from './randomCoordinates';\n\nconst Ship = (name, length) => {\n  let sunk = false;\n  let horizontal = true;\n\n  const hits = Array(length).fill(false);\n\n  const hit = (position) => {\n    if (position <= hits.length) hits[position] = true;\n    sinkShip();\n  };\n\n  const sinkShip = () => {\n    if (hits.every((hit) => hit === true)) sunk = true;\n  };\n\n  const rotate = () => {\n    horizontal = !horizontal;\n  };\n\n  const randomOrientation = () => {\n    const { x } = randomCoordinates();\n    for (let i = 0; i < x; i += 1) {\n      rotate();\n    }\n  };\n\n  return {\n    name,\n    length,\n    hit,\n    rotate,\n    randomOrientation,\n    get sunk() {\n      return sunk;\n    },\n    get hits() {\n      return hits;\n    },\n    get horizontal() {\n      return horizontal;\n    },\n  };\n};\n\nexport default Ship;\n","import Ship from './ship';\nimport randomCoordinates from './randomCoordinates';\n\nconst Gameboard = () => {\n  let grid = [];\n  const shipNamesAndLengths = [\n    { name: 'destroyer', length: 2 },\n    { name: 'submarine', length: 3 },\n    { name: 'cruiser', length: 3 },\n    { name: 'battleship', length: 4 },\n    { name: 'carrier', length: 5 },\n  ];\n  let ships = [];\n  let shipsToPlace = [];\n\n  const buildGrid = () => {\n    const gridObj = { ship: false, hit: false };\n    grid = new Array(10);\n    grid.fill(gridObj, 0);\n    for (let i = 0; i < grid.length; i += 1) {\n      grid[i] = new Array(10);\n      grid[i].fill(gridObj, 0);\n    }\n  };\n\n  const buildShips = () => shipNamesAndLengths.map((obj) => Ship(obj.name, obj.length));\n\n  const resetShips = () => (ships = buildShips());\n\n  const clearShipsFromBoard = () => buildGrid();\n\n  const validateShipPlacement = (ship, random = false, row, column) => {\n    if (random) {\n      let illegalPlacement = true;\n      let coordinates = { x: 0, y: 0 };\n      while (illegalPlacement) {\n        coordinates = randomCoordinates();\n        if (ship.horizontal === true) {\n          coordinates.y = fitShipToGrid(ship.length, coordinates.y);\n        } else {\n          coordinates.x = fitShipToGrid(ship.length, coordinates.x);\n        }\n        illegalPlacement = checkForShipClash(ship.length, ship.horizontal, coordinates.x, coordinates.y);\n      }\n      return coordinates;\n    }\n    // validation for user selected placement\n    let illegalPlacement = true;\n    let coordinates = { row, column };\n    if (ship.horizontal === true) {\n      coordinates.column = fitShipToGrid(ship.length, coordinates.column);\n    } else coordinates.row = fitShipToGrid(ship.length, coordinates.row);\n    illegalPlacement = checkForShipClash(ship.length, ship.horizontal, coordinates.row, coordinates.column);\n    if (illegalPlacement) return;\n    return coordinates;\n  };\n\n  const checkForShipClash = (shipLength, horizontal, startX, startY) => {\n    if (horizontal) {\n      for (let i = 0; i < shipLength; i += 1) {\n        if (grid[startX][startY + i].ship) {\n          return true;\n        }\n      }\n      return false;\n    }\n    for (let i = 0; i < shipLength; i += 1) {\n      if (grid[startX + i][startY].ship) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const fitShipToGrid = (shipLength, startPosition) => {\n    if (startPosition + shipLength > 9) {\n      startPosition = 9 - shipLength + 1;\n      return startPosition;\n    }\n    return startPosition;\n  };\n\n  const randomShipPlacement = () => {\n    let random = true;\n    ships.forEach((ship) => {\n      ship.randomOrientation();\n      const { x, y } = validateShipPlacement(ship, random);\n      placeShip(ship, x, y);\n    });\n  };\n\n  const placeHorizontal = (row, column, ship) =>\n    grid.map((r, rIndex) =>\n      r.map((c, cIndex) =>\n        rIndex === row && cIndex >= column && cIndex < column + ship.length ? { ...c, ship: { name: ship.name, index: cIndex - column } } : c\n      )\n    );\n\n  const placeVertical = (row, column, ship) =>\n    grid.map((r, rIndex) =>\n      r.map((c, cIndex) =>\n        cIndex === column && rIndex >= row && rIndex < row + ship.length ? { ...c, ship: { name: ship.name, index: rIndex - row } } : c\n      )\n    );\n\n  const placeShip = (ship, row, column) => {\n    let newGrid = [];\n    if (ship.horizontal) newGrid = placeHorizontal(row, column, ship);\n    else newGrid = placeVertical(row, column, ship);\n    grid = newGrid;\n    return;\n  };\n\n  const placeUserShip = (ship, row, column) => {\n    let newGrid = [];\n    let coordinates = validateShipPlacement(ship, false, row, column);\n    if (!coordinates) return false;\n    if (ship.horizontal) newGrid = placeHorizontal(coordinates.row, coordinates.column, ship);\n    else newGrid = placeVertical(coordinates.row, coordinates.column, ship);\n    grid = newGrid;\n    return true;\n  };\n\n  const findShipByName = (name) => ships.find((obj) => obj.name === name);\n\n  const checkShipHit = (i, j) => {\n    if (grid[i][j].ship !== false && grid[i][j].hit === true) return true;\n  };\n\n  const receiveAttack = (i, j) => {\n    if (grid[i][j].hit) return;\n    if (grid[i][j].ship !== false && grid[i][j].hit === false) {\n      const shipObj = grid[i][j].ship;\n      const hitShip = findShipByName(shipObj.name);\n      hitShip.hit(shipObj.index);\n    }\n    const newGrid = grid.map((row, indexX) =>\n      row.map((element, indexY) => {\n        if (indexX === i && indexY === j) {\n          return {\n            ...element,\n            hit: true,\n          };\n        }\n        return element;\n      })\n    );\n    grid = newGrid;\n    if (checkShipHit(i, j)) return true;\n    return false;\n  };\n\n  const checkAllShipsSunk = () => {\n    if (ships.every((ship) => ship.sunk === true)) return true;\n    return false;\n  };\n\n  buildGrid();\n  ships = buildShips();\n  shipsToPlace = buildShips();\n\n  return {\n    get grid() {\n      return grid;\n    },\n    get ships() {\n      return ships;\n    },\n    get shipsToPlace() {\n      return shipsToPlace;\n    },\n    buildGrid,\n    buildShips,\n    resetShips,\n    clearShipsFromBoard,\n    randomShipPlacement,\n    placeShip,\n    placeUserShip,\n    receiveAttack,\n    checkAllShipsSunk,\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from './gameboard';\nimport randomCoordinates from './randomCoordinates';\n\nconst Player = (boolean) => {\n  const isAI = boolean;\n  const board = Gameboard();\n  if (isAI) board.randomShipPlacement();\n\n  const placeHit = (board, x, y) => {\n    const checkHit = board.receiveAttack(x, y);\n    return { x, y, checkHit };\n  };\n\n  const aiAttack = (board) => {\n    const { x, y } = randomCoordinates();\n    if (board.grid[x][y].hit === true) {\n      aiAttack(board);\n    }\n    const hit = placeHit(board, x, y);\n    return hit;\n  };\n\n  const attack = (board, x, y) => {\n    let hitCoordinates = {};\n    if (isAI === true) {\n      hitCoordinates = aiAttack(board);\n      return hitCoordinates;\n    }\n    hitCoordinates = placeHit(board, x, y);\n    return hitCoordinates;\n  };\n\n  return {\n    get board() {\n      return board;\n    },\n    attack,\n  };\n};\n\nexport default Player;\n","import Player from './player';\n\nconst GameController = (() => {\n  const playerOne = Player();\n  const playerTwo = Player(true);\n  let gameOver = false;\n  let winner = null;\n\n  let playerOneTurn = true;\n\n  const changeTurn = () => {\n    playerOneTurn = !playerOneTurn;\n    let hit = true;\n    if (!playerOneTurn) {\n      while (hit) {\n        let didHit = playerTwo.attack(playerOne.board);\n        if (!didHit.checkHit) hit = false;\n        if (winCondition()) hit = false; //simulate move to next round\n      }\n      changeTurn();\n    }\n  };\n\n  const restartGame = () => {\n    playerOne.board.clearShipsFromBoard();\n    playerTwo.board.clearShipsFromBoard();\n    playerOne.board.resetShips();\n    playerTwo.board.resetShips();\n    playerTwo.board.randomShipPlacement();\n  };\n\n  const winCondition = () => {\n    if (playerOneTurn) {\n      if (playerTwo.board.checkAllShipsSunk()) {\n        gameOver = true;\n        winner = 'player one';\n        restartGame();\n        return winner;\n      }\n    } else {\n      if (playerOne.board.checkAllShipsSunk()) {\n        gameOver = true;\n        winner = 'player two';\n        restartGame();\n        return winner;\n      }\n    }\n    return false;\n  };\n\n  const resetWinner = () => {\n    winner = null;\n  };\n\n  return {\n    get playerOne() {\n      return playerOne;\n    },\n    get playerTwo() {\n      return playerTwo;\n    },\n    get gameOver() {\n      return gameOver;\n    },\n    changeTurn,\n    winCondition,\n    resetWinner,\n  };\n})();\n\nexport default GameController;\n","import { useState, useReducer, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button } from './components/commonStyling';\nimport GridContainer from './components/GridContainer';\nimport Header from './components/Header';\nimport PlacementGrid from './components/PlacementGrid';\nimport ShipPanel from './components/ShipPanel';\nimport gameController from './factories/gamecontroller';\n\n// reducer function for managing ships that player is still to place on the board\nconst reducer = (ships, action) => {\n  switch (action.type) {\n    case 'placed ship':\n      return ships.filter((ship) => ship.name !== action.name);\n    case 'randomly placed':\n      return {};\n    case 'reset ships':\n      return gameController.playerOne.board.shipsToPlace;\n    default:\n      throw new Error('oops');\n  }\n};\n\nfunction App() {\n  // board states\n  const [playerOneGridState, setPlayerOneGridState] = useState(gameController.playerOne.board.grid);\n  const [playerTwoGridState, setPlayerTwoGridState] = useState(gameController.playerTwo.board.grid);\n\n  // state management for placing player's ships\n  const [showShipPanel, setShowShipPanel] = useState(true);\n  const [shipsToPlace, dispatch] = useReducer(reducer, gameController.playerOne.board.shipsToPlace);\n  const [placingShip, setPlacingShip] = useState(null);\n  const [isHovering, setIsHovering] = useState(null);\n  const [allShipsPlaced, setAllShipsPlaced] = useState(false);\n\n  // game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWinner, setGameWinner] = useState(null);\n\n  useEffect(() => {\n    if (shipsToPlace.length === 0) setAllShipsPlaced(true);\n  }, [shipsToPlace]);\n\n  const handleShipPickUp = (e) => {\n    const selectedShip = shipsToPlace.filter((obj) => obj.name === e.target.parentNode.id);\n    setPlacingShip((placingShip) => selectedShip[0]);\n  };\n\n  const handlePlaceShip = (e) => {\n    if (!placingShip) return;\n    if (e.target.id >= '00' && e.target.id <= '99') {\n      const row = Number(e.target.id[0]);\n      const column = Number(e.target.id[1]);\n      let successfulPlacement = gameController.playerOne.board.placeUserShip(placingShip, row, column);\n      if (successfulPlacement) {\n        setPlayerOneGridState(gameController.playerOne.board.grid);\n        dispatch({ type: 'placed ship', name: placingShip.name });\n        setPlacingShip(null);\n        setIsHovering(false);\n      }\n    }\n  };\n\n  const handleHover = (e) => {\n    if (placingShip) {\n      const coordinates = [];\n      let cell = parseInt(e.target.id);\n      if (placingShip.horizontal) {\n        for (let i = 0; i < placingShip.length; i += 1) {\n          const row = e.target.id[0];\n          const rowLimit = parseInt(`${row}9`);\n          if (cell + placingShip.length > rowLimit) cell = rowLimit - placingShip.length + 1;\n          let column = cell + i;\n          if (column < 10) column = '0' + column;\n          coordinates.push(column.toString());\n        }\n      } else {\n        for (let i = 0; i < placingShip.length; i += 1) {\n          const column = e.target.id[1];\n          const columnLimit = parseInt(`9${column}`);\n          if (cell + placingShip.length * 10 > columnLimit) cell = columnLimit - placingShip.length * 10 + 10;\n          let row = cell + i * 10;\n          if (row < 10) row = '0' + row;\n          coordinates.push(row.toString());\n        }\n      }\n      setIsHovering((isHovering) => coordinates);\n    }\n  };\n\n  const handleRightClick = (e) => {\n    e.preventDefault();\n    if (!placingShip) return;\n    if (e.target.id >= '00' && e.target.id <= '99') {\n      placingShip.rotate();\n    }\n  };\n\n  const handleClick = (e) => {\n    const x = Number(e.target.id[0]);\n    const y = Number(e.target.id[1]);\n    if (playerTwoGridState[x][y].hit) return; // check hit has not already been placed in cell\n    let attack = gameController.playerOne.attack(gameController.playerTwo.board, x, y);\n    setPlayerTwoGridState(gameController.playerTwo.board.grid);\n    if (attack.checkHit) {\n      checkforWinner();\n      return;\n    } else gameController.changeTurn();\n    checkforWinner();\n    setPlayerOneGridState(gameController.playerOne.board.grid);\n  };\n\n  const startGame = () => {\n    setGameStarted(true);\n    setAllShipsPlaced(false);\n  };\n\n  const checkforWinner = () => {\n    let winner = gameController.winCondition();\n    if (winner) {\n      setGameWinner(`${winner} wins!`);\n      setGameOver(true);\n    }\n    winner = null;\n  };\n\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setGameOver(false);\n    setGameWinner(null);\n    setPlayerOneGridState(gameController.playerOne.board.grid);\n    setPlayerTwoGridState(gameController.playerTwo.board.grid);\n    setShowShipPanel(true);\n    gameController.resetWinner();\n    dispatch({ type: 'reset ships' });\n  };\n\n  const playerOneRandomPlacement = () => {\n    gameController.playerOne.board.clearShipsFromBoard();\n    gameController.playerOne.board.randomShipPlacement();\n    setPlayerOneGridState(gameController.playerOne.board.grid);\n    setAllShipsPlaced(true);\n    setIsHovering(false);\n    setPlacingShip(null);\n    dispatch({ type: 'randomly placed' });\n  };\n\n  return (\n    <PageWrapper>\n      <AppContainer>\n        <Header />\n        {!gameStarted && (\n          <PlayerOnePlacementContainer>\n            <PlacementGrid\n              grid={playerOneGridState}\n              placingShip={placingShip}\n              isHovering={isHovering}\n              handleHover={handleHover}\n              handleClick={handlePlaceShip}\n              handleRightClick={handleRightClick}\n            />\n            {showShipPanel && (\n              <ShipPanel\n                ships={shipsToPlace}\n                handleClick={handleShipPickUp}\n                playerOneRandomPlacement={playerOneRandomPlacement}\n                startGame={startGame}\n                allShipsPlaced={allShipsPlaced}\n              />\n            )}\n            {/* {allShipsPlaced && <Button onClick={startGame}>start</Button>} */}\n          </PlayerOnePlacementContainer>\n        )}\n        {gameStarted && (\n          <TwoPlayerPlacementContainer>\n            <GridContainer grid={playerOneGridState} playerTitle={'Your board'} />\n            <GridContainer clickFunction={handleClick} grid={playerTwoGridState} ai={true} playerTitle={\"Enemy's board\"} />\n          </TwoPlayerPlacementContainer>\n        )}\n        {gameOver && (\n          <div>\n            <p>{gameWinner}</p>\n            <Button onClick={handlePlayAgain}>Play again</Button>\n          </div>\n        )}\n      </AppContainer>\n    </PageWrapper>\n  );\n}\n\nexport default App;\n\nconst PageWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst AppContainer = styled.div`\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst PlayerOnePlacementContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  border-radius: 8px;\n  background: #df645f;\n  width: 800px;\n`;\n\nconst TwoPlayerPlacementContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  border-radius: 8px;\n  background: #df645f;\n  width: 1200px;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}